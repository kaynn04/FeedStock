#include <Wire.h>
#include <LiquidCrystal_I2C.h>
#include <ESP8266WiFi.h>
#include <ESP8266Firebase.h>
#include <Servo.h>
#include <time.h> 

#define _SSID "POCO X5 5G"          
#define _PASSWORD "2ezforKaynn"   
#define REFERENCE_URL "https://feedstock-718e1-default-rtdb.asia-southeast1.firebasedatabase.app/"

Firebase firebase(REFERENCE_URL);
LiquidCrystal_I2C lcd(0x27, 16, 2); // LCD with I2C address 0x27

Servo servo1;
Servo servo2;

struct Alarm {
    int feedingHour;
    int feedingMinute;
};

Alarm alarms[4]; // Array to hold 4 alarms
const int buzzerPin1 = D13; // Digital pin connected to passive buzzer
const int buzzDuration = 2000;

int waterDuration;
int feedDuration;
int lastActivatedMinute = -1; // Track the last minute an alarm was activated

// NTP server settings
const char* ntpServer = "time.nist.gov";
const long gmtoffset_sec = 8 * 3600; // GMT+8
const int daylightoffset_sec = 0;

void setup() {
    Serial.begin(115200);
    pinMode(LED_BUILTIN, OUTPUT);
    digitalWrite(LED_BUILTIN, LOW);
    pinMode(buzzerPin1, OUTPUT);
    lcd.begin();
    lcd.backlight();
    lcd.clear();

    // Connect to WiFi
    lcd.setCursor(0, 0);
    lcd.print("Connecting to:");
    lcd.setCursor(0, 1);
    lcd.print(_SSID);
    WiFi.begin(_SSID, _PASSWORD);

    while (WiFi.status() != WL_CONNECTED) {
        delay(500);
        Serial.print(".");
    }

    Serial.println("WiFi Connected");
    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print("WiFi Connected");

    // Print the IP address
    lcd.setCursor(0, 1);
    lcd.print(WiFi.localIP());

    servo1.attach(D10); // Attach servo to pin D10
    servo2.attach(D9);  // Attach servo to pin D9

    // Set the servos to the initial position
    servo1.write(0);
    servo2.write(0);

    configTime(gmtoffset_sec, daylightoffset_sec, ntpServer); // Set time from NTP server

    // Fetch durations from Firebase
    feedDuration = firebase.getInt("feedServo");
    waterDuration = firebase.getInt("waterServo");
    retrieveTime(); // Retrieve alarm times from Firebase

    lcd.clear();
    displayAlarms(); // Display feeding times once at setup
}

void loop() {
    static unsigned long lastFetchTime = 0;
    unsigned long currentTime = millis();

    if (currentTime - lastFetchTime > 60000) { // Fetch updates every minute
        feedDuration = firebase.getInt("feedServo");
        waterDuration = firebase.getInt("waterServo");
        lastFetchTime = currentTime;  
        retrieveTime(); // Update alarm times
    }

    // Fetch the current time from the NTP server
    struct tm timeinfo;
    if (getLocalTime(&timeinfo)) {
        // Display current time
        lcd.setCursor(0, 0);
        lcd.print("Current Time:    ");
        lcd.setCursor(0, 1);
        lcd.print(timeinfo.tm_hour < 10 ? "0" : ""); // Add leading zero for hour
        lcd.print(timeinfo.tm_hour);
        lcd.print(":");
        lcd.print(timeinfo.tm_min < 10 ? "0" : ""); // Add leading zero for minutes
        lcd.print(timeinfo.tm_min);
        lcd.print(":");
        lcd.print(timeinfo.tm_sec < 10 ? "0" : ""); // Add leading zero for seconds
        lcd.print(timeinfo.tm_sec);

        // Check alarms every minute
        if (timeinfo.tm_min != lastActivatedMinute) {
            checkAlarms(timeinfo.tm_hour, timeinfo.tm_min);
            lastActivatedMinute = timeinfo.tm_min; // Update last activated minute
        }
    }
    delay(500); // Loop delay
}

void checkAlarms(int currentHour, int currentMinute) {
    static int lastCheckedMinute = -1; // Track the last checked minute

    // Only check alarms if the minute has changed
    if (currentMinute != lastCheckedMinute) {
        lastCheckedMinute = currentMinute; // Update last checked minute

        for (int i = 0; i < 4; i++) {
            if (currentHour == alarms[i].feedingHour && currentMinute == alarms[i].feedingMinute) {
                lcd.clear();
                lcd.setCursor(0, 0);  
                lcd.print("Feeding...");
                // Move servos
                moveServos();
                lcd.setCursor(0, 1);
                lcd.print("Done!");
                Serial.print("Alarm ");
                Serial.print(i);
                Serial.println(" activated.");
            }
        }
    }
}

void moveServos() {
    unsigned long startTime = millis();
    unsigned long maxDuration = max(feedDuration, waterDuration) * 1000;

    // Start moving servos and sounding buzzer
      servo1.attach(D10); // Re-attach the servo to ensure it is ready
      servo2.attach(D9); // Re-attach the servo to ensure it is ready

    while (millis() - startTime < maxDuration) {
        // Move servo1 if within feedDuration
        if (millis() - startTime < feedDuration * 1000) {
            servo1.write(180); // Move servo1 to 180 degrees
        } else {
            servo1.write(25); // Return servo1 to 0 degrees
        }

        // Move servo2 if within waterDuration
        if (millis() - startTime < waterDuration * 1000) {
            servo2.write(180); // Move servo2 to 180 degrees
        } else {
            servo2.write(28); // Return servo2 to 0 degrees
        }

        tone(buzzerPin1, 2000); // Sound buzzer during operation
    }

    noTone(buzzerPin1); // Stop the tone
    servo1.write(25);
    servo2.write(28);
    servo1.detach();
    servo2.detach();

    lcd.setCursor(0, 1);
    lcd.print("Done!");
}

void retrieveTime() {
    Serial.print("Retrieving Time data...");
    for (int i = 0; i < 4; i++) {
        String timeString = firebase.getString("alarms/" + String(i));
        Serial.print("Received alarm ");
        Serial.print(i);
        Serial.print(": ");
        Serial.println(timeString);

        int separatorIndex = timeString.indexOf(':');
        int spaceIndex = timeString.indexOf(' ');
        if (timeString.substring(spaceIndex + 1) == "AM") {
            alarms[i].feedingHour = timeString.substring(0, separatorIndex).toInt();
        } else {
            if (timeString.substring(0, separatorIndex).toInt() == 12) {
                alarms[i].feedingHour = timeString.substring(0, separatorIndex).toInt();
            } else {
                alarms[i].feedingHour = timeString.substring(0, separatorIndex).toInt() + 12;
            }
        }
        alarms[i].feedingMinute = timeString.substring(separatorIndex + 1, spaceIndex).toInt();

        Serial.print("Alarm ");
        Serial.print(i);
        Serial.print(" parsed as: ");
        Serial.print(alarms[i].feedingHour);
        Serial.print(":");
        Serial.println(alarms[i].feedingMinute);
    }

    Serial.println("Data successfully retrieved!");
}

void displayAlarms() {
    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print("Feeding Times:");
    for (int i = 0; i < 4; i++) {
        lcd.setCursor(0, 1);
        lcd.print(alarms[i].feedingHour > 12 ? alarms[i].feedingHour - 12 : alarms[i].feedingHour);
        lcd.print(":");
        if (alarms[i].feedingMinute < 10) lcd.print("0"); // Add leading zero if needed
        lcd.print(alarms[i].feedingMinute);
        lcd.print(alarms[i].feedingHour >= 12 ? " PM" : " AM");
        delay(2500); // Delay to view feeding times
    }
}
